{"version":3,"sources":["QuizMaker.js","HashGenerator.js","ApiFunctions/httpApi.js","App.js","ApiFunctions/serviceWorker.js","index.js"],"names":["QuizMaker","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","resetThenSet","id","key","temp","JSON","parse","stringify","state","forEach","item","selected","setState","defineProperty","variableType","title","counter","test","object","react_default","a","createElement","inputs","text","newText","refresh","variableNumber","outputArray","outputs","selectedOutput","modalIsOpen","quizTitle","quizTypes","finalQuiz","courses","backendInput","variableTypeList","x","appendToArray","bind","assertThisInitialized","openModal","afterOpenModal","closeModal","filter","element","index","ex","console","log","concat","toString","newbackendInput","_this2","react_router_dom","style","backgroundColor","width","height","href","padding","onClick","map","build","list","lib_default","isOpen","onAfterOpen","contentLabel","position","value","onChange","e","target","display","flexDirection","onChangeAge","borderWidth","borderRadius","length","marginLeft","flexWrap","marginBottom","borderBottomColor","split","alert","getQuizText","getVariables","color","Component","HashGenerator","number_of_students","course_id","axios","get","headers","Content-Type","then","response","data","catch","error","className","getHashes","App","react_router","exact","path","render","src_QuizMaker","src_HashGenerator","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.82c9b788.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Styles/App.css';\r\nimport \"./Styles/quizMaker.css\";\r\nimport AutosizeInput from 'react-input-autosize';\r\nimport Modal from 'react-modal';\r\nimport { DropdownMultiple, Dropdown } from 'reactjs-dropdown-component';\r\n//import { createStackNavigator, createAppContainer } from 'react-navigation';\r\nimport {BrowserRouter, Route} from 'react-router-dom';\r\n\r\n{/*\r\n  question_template = {\r\n    \"inputs\":[\"a\",\"b\"], \r\n    \"outputs\":[\"a+b\", \"a-b\"],\r\n    \"input_type\":\"regular\",\r\n    \"text\":\"I have $ apples, somebody gave me $ apples. How many apples do I have?\",\r\n    \"output_template\":\"A = <$, $>\",\r\n    \"variable_ranges\":[[1,3],[5,7]], \r\n    \"variable_type\": \"bla\"}\r\n*/}\r\n\r\n\r\nclass QuizMaker extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // Don't call this.setState() here!\r\n    this.state = {\r\n      counter: \"sfs\", test: \"\",\r\n      object: <input></input>,\r\n      inputs: ['Enter text here'],\r\n      text: '',\r\n      newText: \"\",\r\n      refresh: false,\r\n      variableNumber: 0,\r\n      outputArray: '',\r\n      outputs: [\"\"],\r\n      selectedOutput: 0,\r\n      modalIsOpen: true,\r\n      quizTitle: '',\r\n      quizTypes: [],\r\n      finalQuiz: [],\r\n      courses:[{title:'CS 228'}, {title:'CS 310'}],\r\n      backendInput:[],\r\n      variableType:\"\",\r\n      variableTypeList: [\r\n        {\r\n          id: 0,\r\n          title: 'Whole Numbers',\r\n          selected: false,\r\n          key: 'variableTypeList'\r\n        },\r\n        {\r\n          id: 1,\r\n          title: 'Negative Numbers',\r\n          selected: false,\r\n          key: 'variableTypeList'\r\n        },\r\n        {\r\n          id: 2,\r\n          title: 'Natural Numbers',\r\n          selected: false,\r\n          key: 'variableTypeList'\r\n        }\r\n      ]\r\n       \r\n\r\n    };\r\n\r\n    this.x = [];\r\n    // this.addTag = this.addTag.bind(this);\r\n    this.appendToArray = this.appendToArray.bind(this);\r\n    this.openModal = this.openModal.bind(this);\r\n    this.afterOpenModal = this.afterOpenModal.bind(this);\r\n    this.closeModal = this.closeModal.bind(this);\r\n  }\r\n\r\n\r\n  resetThenSet = (id, key) => {\r\n    let temp = JSON.parse(JSON.stringify(this.state[key]));\r\n    temp.forEach(item => item.selected = false);\r\n    temp[id].selected = true;\r\n    this.setState({\r\n      [key]: temp\r\n    });\r\n\r\n    this.setState({variableType:temp[id].title});\r\n  }\r\n\r\n\r\n  openModal() {\r\n    this.setState({ modalIsOpen: true });\r\n  }\r\n\r\n  afterOpenModal() {\r\n    // references are now sync'd and can be accessed.\r\n    // this.subtitle.style.color = '#f00';\r\n  }\r\n\r\n  closeModal() {\r\n    this.setState({ modalIsOpen: false });\r\n  }\r\n\r\n\r\ngetVariables(){   \r\n  let x = this.state.inputs.filter((element, index) => {\r\n    return index % 2 != 0;\r\n  })\r\n\r\n  return x;\r\n}\r\n\r\ngetQuizText(){   \r\n  let x = this.state.inputs.filter((element, index) => {\r\n    return index % 2 === 0;\r\n  });\r\n\r\n  return x;\r\n}\r\n\r\n\r\n\r\n  appendToArray(ex) {\r\n    var newInput = 'input-${this.state.inputs.length}';\r\n    this.setState({ newText: this.state.newText + this.state.text })\r\n    console.log(this.state.inputs)\r\n\r\n\r\n    switch (ex) {\r\n      case \"string\":\r\n        this.setState({ inputs: this.state.inputs.concat([\"string\"]) });\r\n        break;\r\n      case \"sqrt\":\r\n        this.setState({ variableNumber: this.state.variableNumber + 1, inputs: this.state.inputs.concat([\"a\" + this.state.variableNumber.toString(), \"Enter text here\"]) });\r\n        var newbackendInput=[]\r\n        newbackendInput = this.state.backendInput.concat(\"a\" + this.state.variableNumber.toString());\r\n        this.setState({backendInput:newbackendInput});\r\n        \r\n        break;\r\n      default:\r\n        this.setState({ inputs: this.state.inputs.concat([]) });\r\n        break;\r\n    }\r\n    //console.log(this.state.newText)\r\n  }\r\n\r\n\r\n  onChangeAge() {\r\n    this.setState({ refresh: !this.state.refresh })\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n      <div style={{ backgroundColor: \"#EFF0F2\", width: \"100%\", height: 1000 }}>\r\n      <a href=\"HashGenerator\">Sign In</a>\r\n\r\n        <div id=\"quizMakerContainer\">\r\n          <div id=\"templateMaker\">\r\n            <div id=\"templateMakerHeader\">\r\n              <div id=\"templateMakerTitle\">Quiz</div>\r\n              <div style={{ backgroundColor: 'blue', padding: 20, width: 100, }} onClick={() => { this.openModal() }}>Create new quiz</div>\r\n            </div>\r\n\r\n            <div>\r\n              {this.state.quizTypes.map((item, index) => {\r\n                return (\r\n                  <div id=\"quizTypes\"> {this.state.quizTypes[index]}</div>)\r\n              })}\r\n            </div>\r\n          </div>\r\n          <div id=\"courseSelector\">\r\n            <div id=\"templateMakerTitle\">Courses</div>\r\n            <Dropdown title=\"Select Courses\"  list={this.state.courses}/>\r\n          </div>\r\n\r\n        </div>\r\n\r\n        {/* TEMPLATE MAKER MODAL */}\r\n        <Modal\r\n          isOpen={this.state.modalIsOpen}\r\n          onAfterOpen={this.afterOpenModal}\r\n          // onRequestClose={this.closeModal}\r\n          contentLabel=\"Example Modal\"\r\n        >\r\n          <div onClick={() => { this.closeModal() }}>close</div>\r\n          <div style={{ backgroundColor: \"#F3F6F8\", width: \"100%\", height: 1000, position: 'absolute' }}>\r\n            <div id='mainContainer'>\r\n              <div>\r\n                <div id=\"QuizMakerTitle\" >QuizMaker</div>\r\n\r\n\r\n                {/*TITLE*/}\r\n                <div> Enter Quiz Title <input value={this.state.quizTitle} onChange={(e) => { this.setState({ quizTitle: e.target.value }) }} />  </div>\r\n                <Dropdown title=\"Select Variable Type\" list={this.state.variableTypeList} resetThenSet={this.resetThenSet}/>\r\n\r\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                  <div>\r\n                    <div id=\"canvas\">\r\n                      {this.state.inputs.map((item, index) => {\r\n                        //console.log(\"The current iteration is: \" + index);\r\n                        if (item[0] == \"a\") {\r\n                          return (<input id=\"variables\" value={item} onChange={this.onChangeAge.bind(this)} />)\r\n                        }\r\n                        else {\r\n                          return (<input\r\n                            onChange={(e) => {\r\n                              this.x = this.state.inputs;\r\n                              this.x[index] = e.target.value;\r\n                              console.log(\"=====\")\r\n                              console.log(this.x)\r\n                              console.log(\"=====\")\r\n                              this.setState({ refresh: !this.state.refresh })\r\n                              // this.onChangeAge();\r\n                            }\r\n                            }\r\n                            id=\"bleh\"\r\n                            style={{ backgroundColor: '#E8E9EA', padding: 9, borderWidth: 0, borderRadius: 10, width: this.state.inputs[index].length * 6.5 }}\r\n                            value={this.state.inputs[index]}\r\n\r\n                          />)\r\n                        }\r\n                      }\r\n\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div style={{ marginLeft: 30 }}>\r\n                    <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                      <button id=\"addVariable\" onClick={() => this.appendToArray(\"sqrt\")}> Add Variable </button>\r\n\r\n                      <div id=\"mathTitle\"> Math Functions </div>\r\n                      <div style={{ width: 400, flexWrap: 'wrap' }}>\r\n                        <button id=\"mathButtons\" onClick={() => this.setState({ outputArray: this.state.outputArray + 'Math.sqrt' })}> sqrt </button>\r\n                        <button id=\"mathButtons\" onClick={() => { this.state.outputs[this.state.selectedOutput] = this.state.outputs[this.state.selectedOutput] + '+ '; this.setState({ refresh: !this.state.refresh }) }}> add </button>\r\n                        <button id=\"mathButtons\" onClick={() => { this.state.outputs[this.state.selectedOutput] = this.state.outputs[this.state.selectedOutput] + '- '; this.setState({ refresh: !this.state.refresh }) }}> sub </button>\r\n                        <button id=\"mathButtons\" onClick={() => { this.state.outputs[this.state.selectedOutput] = this.state.outputs[this.state.selectedOutput] + '÷ '; this.setState({ refresh: !this.state.refresh }) }}> div </button>\r\n                        <button id=\"mathButtons\" onClick={() => { this.state.outputs[this.state.selectedOutput] = this.state.outputs[this.state.selectedOutput] + '/ '; this.setState({ refresh: !this.state.refresh }) }}> mul </button>\r\n                        <button id=\"mathButtons\" onClick={() => this.appendToArray(\"sqrt\")}> mod </button>\r\n                        {/* <button id=\"mathButtons\" onClick={() => console.log(this.x)}> array output </button> */}\r\n\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n\r\n                <div>\r\n                  {this.state.inputs.map((item, index) => {\r\n                    //console.log(\"The current iteration is: \" + index);\r\n                    if (item[0] == \"a\") {\r\n                      return (<button id=\"outputVariables\"\r\n                        onClick={() => { this.state.outputs[this.state.selectedOutput] = this.state.outputs[this.state.selectedOutput] + item + \" \"; this.setState({ refresh: !this.state.refresh }) }}\r\n                        onChange={this.onChangeAge.bind(this)}>\r\n                        {item}\r\n                      </button>\r\n                      )\r\n                    }\r\n\r\n                  }\r\n                  )}\r\n\r\n                </div>\r\n\r\n                <div>\r\n                  <div id=\"outputTitle\">Output</div>\r\n                  <div style={{ flexDirection: 'row', display: 'flex' }}>\r\n                    <div>\r\n                      {/* Ouputs */}\r\n                      {this.state.outputs.map((item, index) => {\r\n                        //console.log(\"The current iteration is: \" + index);\r\n                        return (\r\n                          <div style={{ flexDirection: 'column', marginBottom: 15, }}>\r\n                            <div style={{ borderWidth: 20, borderBottomColor: 'green' }} id=\"outputCanvas\" onClick={() => this.setState({ selectedOutput: index })} >\r\n\r\n                              {this.state.outputs[index].split(\" \").map((item, index) => {\r\n\r\n                                return (\r\n\r\n                                  <div id=\"outputItems\">\r\n                                    <div id=\"outputItemText\">\r\n                                      {item}\r\n                                    </div>\r\n                                  </div>\r\n                                )\r\n                              }\r\n                              )\r\n                              }\r\n\r\n                            </div>\r\n                          </div>\r\n                        )\r\n                      })}\r\n                    </div>\r\n                    <div onClick={() => this.setState({ outputs: this.state.outputs.concat([\"\"]) })} id=\"addOutput\" >Add output</div>\r\n                  </div>\r\n                </div>\r\n                <div onClick={() => { this.setState({ \r\n                  quizTypes: this.state.quizTypes.concat([this.state.quizTitle]), quizTitle: '' });\r\n                 alert(\"Your quiz template has been added to the list\");\r\n               \r\n\r\n                 console.log(\"Get Variable Type\");\r\n                 console.log(this.state.variableType)\r\n\r\n                 \r\n                 console.log(\"Quiz Title============\");\r\n                 console.log(this.state.quizTitle)\r\n\r\n                 //Getting Text\r\n                 console.log(\"Quiz Text ===============\")\r\n                 console.log(this.getQuizText());\r\n                \r\n                 //Getting Inputs\r\n                 console.log(\"Inputs ===============\")\r\n                 console.log(this.getVariables());\r\n\r\n                 //Getting Outputs\r\n                 console.log(\"Outputs ===============\")\r\n                 console.log(this.state.outputs);\r\n\r\n\r\n                 //Getting \r\n                 }} style={{ backgroundColor: 'blue', padding: 10, color: 'white', borderRadius: 15 }}> Add quiz Template to quiz list </div>\r\n\r\n\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n        </Modal>\r\n\r\n        {/* ============================================================ */}\r\n\r\n\r\n\r\n      </div>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuizMaker;\r\n\r\n\r\n{\r\n  /*\r\n  id = models.AutoField(primary_key=True)\r\n\ttitle = models.CharField(max_length=255)\r\n  question_json = {\r\n    id = models.AutoField(primary_key=True)\r\n    type = models.CharField(max_length=255)\r\n    template_json = {\"input_num\": 2, \"outputs\":[\"a0+a1\", \"a0-a1\"], \"input_type\":\"regular\",\"text\":\"Find the sum and difference of $ and $\",\"output_template\":\"A = <$, $>\",\"input_range\":[1,100]}\r\n\t  created_on =  models.DateTimeField(auto_now_add=True)\r\n  }\r\n  {\r\n    id = models.AutoField(primary_key=True)\r\n    type = models.CharField(max_length=255)\r\n    template_json = {\"input_num\": 2, \"outputs\":[\"a0+a1\", \"a0-a1\"], \"input_type\":\"regular\",\"text\":\"Find the sum and difference of $ and $\",\"output_template\":\"A = <$, $>\",\"input_range\":[1,100]}\r\n\t  created_on =  models.DateTimeField(auto_now_add=True)\r\n  }\r\n  {\r\n    id = models.AutoField(primary_key=True)\r\n    type = models.CharField(max_length=255)\r\n    template_json = {\"input_num\": 2, \"outputs\":[\"a0+a1\", \"a0-a1\"], \"input_type\":\"regular\",\"text\":\"Find the sum and difference of $ and $\",\"output_template\":\"A = <$, $>\",\"input_range\":[1,100]}\r\n\t  created_on =  models.DateTimeField(auto_now_add=True)\r\n  }\r\n\tis_published = models.BooleanField(default=False)\r\n\tcourse_ids = models.TextField(null=True)\r\n\tcreated_on =  models.DateTimeField(auto_now_add=True)\r\n*/\r\n}","import React, { Component } from 'react';\r\nimport {BrowserRouter, Route} from 'react-router-dom';\r\nimport { getList, addToList, updateItem } from \"./ApiFunctions/httpApi\";\r\n\r\nclass HashGenerator extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            number_of_students:'',\r\n            course_id:''\r\n        }\r\n    }\r\n\r\n\r\ngetHashes(){\r\n    console.log(getList());\r\n    }\r\n\r\n  render() {\r\n    return (\r\n        <BrowserRouter>\r\n      <div className=\"HashGenerator\">\r\n\r\n\r\n      <div> Enter Number of Students\r\n          <input \r\n           value={this.state.number_of_students}\r\n           onChange={(e) => { this.setState({ number_of_students: e.target.value }) }} /> \r\n      </div>\r\n\r\n      <div> Enter Course ID\r\n          <input \r\n           value={this.state.course_id}\r\n           onChange={(e) => { this.setState({ course_id: e.target.value }) }} /> \r\n      </div>\r\n\r\n<div onClick={()=>{this.getHashes()}}>\r\nGenerate Hashes\r\n</div>\r\n\r\n      HASHGENERATOR IS HERE\r\n      </div>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HashGenerator;\r\n","//module imports\r\nimport axios from \"axios\";\r\n\r\n//http://essential-training-app-api.herokuapp.com/api/hashes/<int:amount>/<int:course_id>\r\n\r\n\r\n//var that contains the URL to the backend.\r\nvar backendUrl = \"http://essential-training-app-api.herokuapp.com/api\";\r\n\r\n//Calls the end-point to get the data from the backend.\r\nexport const getList = () => {\r\n  return axios\r\n    .get(\"http://essential-training-app-api.herokuapp.com/api/hashes/23/21/\", {\r\n      headers: { \r\n        \"Content-Type\": \"application/json\" \r\n      } //Let backend know that the data is JSON object.\r\n    })\r\n    .then(response => { \r\n     console.log(\"=========\")\r\n      console.log(response.data)\r\n      return (response.data) //Return data if the function call was successful.\r\n    }).catch(error => {\r\n      console.log(error.response) //Log the error on the console if there was an error.\r\n    });\r\n};\r\n\r\n//Calls the end-point to send the data to the backend.\r\nexport const addToList = (name, text, image, date) => {\r\n  //Take in name,text,image and date as parameter and send it to the backend.\r\n  return axios.post(backendUrl + \"/create/quiz/\",\r\n    {\r\n      name: name,\r\n      text: text,\r\n      image: image,\r\n      date: date,\r\n    }, {\r\n      headers: {\r\n        'Content-Type': \"application/json\"\r\n      } //Let backend know that the data is JSON object.\r\n    })\r\n    .then(response => {\r\n      return (response) //Return data if the function call was successful.\r\n    })\r\n    .catch(error => {\r\n      console.log(error.response) //Log the error on the console if there was an error.\r\n    });\r\n}\r\n\r\n//Calls the end-point to update the number of likes and dislikes.\r\nexport const updateItem = (id, numberLikes, numberDislikes) => {\r\n  //Use the post id to update likes or dislikes on a certain post.\r\n  return axios\r\n    .put(\r\n      backendUrl + \"/posts/\" + `${id}/update`,\r\n      {\r\n        likes: numberLikes,\r\n        dislikes: numberDislikes,\r\n      },\r\n      {\r\n        headers: { \r\n          \"Content-Type\": \"application/json\"\r\n        } //Let backend know that the data is JSON object.\r\n      })\r\n    .then(function (response) {\r\n      return (response) //Return data if the function call was successful.\r\n    })\r\n    .catch(error => {\r\n      console.log(error.response) //Log the error on the console if there was an error.\r\n    });\r\n};\r\n\r\n","import React, { Component } from 'react';\r\nimport QuizMaker from './QuizMaker';\r\nimport {BrowserRouter, Route} from 'react-router-dom';\r\nimport HashGenerator from './HashGenerator';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n        <div>\r\n          <Route exact={true} path='/' render={() => (\r\n            <div className=\"App\">\r\n              <QuizMaker />\r\n            </div>\r\n          )}/>\r\n\r\n<Route exact={true} path='/HashGenerator' render={() => (\r\n            <div className=\"App\">\r\n              <HashGenerator />\r\n            </div>\r\n          )}/>\r\n        </div>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Styles/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './ApiFunctions/serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}